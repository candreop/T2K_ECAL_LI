#! /usr/bin/perl -w
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ECAL LI controller configuration script
#
# For help, type ./configure --help
#
# C.Andreopoulos <<costas.andreopoulos \at stfc.ac.uk>>, Rutherford Lab.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# print out info & exit if any of the command-line arguments was --help
#
if(($match = grep(/--help/i, @ARGV)) > 0) { 
  print "\n";
  print "*** ECAL LI controller: configure script *** \n";
  print "\n";
  print "Usage: ./configure [option]... [flag=value]... \n";
  print "\n";
  print "    FLAG            DESCRIPTION \n";
  print "\n";
  print "    --arch          ROOT-style arch. flag                          default: linux (options: 'macosx','linux','linuxx8664gcc') \n";
  print "    --prefix        installation location (for 'make install')     default: /usr/local/\n";
  print "\n";
  print "enable/disable options with either --enable- or --disable- (eg --enable-debug)\n";
  print "    profiler        enable profiling using Google perftools        default: disabled \n";
  print "    debug           enable debugging symbols                       default: disabled \n";
  print "\n";
  print "with options for 3rd party software, prefix with --with- (eg --with-midas-lib=/some/path/)\n";
  print "    midas-inc       path to midas includes                         MIDAS dependency mandatory / path can be auto-detected \n";
  print "    midas-lib       path to midas libraries                        MIDAS dependency mandatory / path can be auto-detected  \n";
  print "    optimiz-level   compiler opitimization level O/O2/O3/OO/Os     default: O2 \n";
  print "    profiler-lib    path to the profiler library                   needed if you --enable-profiler \n";
  print "\n";
  exit 0;
}

# Check that $ECALLI is set
#
$ECALLI = $ENV{'ECALLI'};
die ("*** Error *** The ECALLI environmental variable (pointing to the top level ECALLI client directory) is not defined") 
unless defined $ECALLI;

# Enable auto-detection?
#
system("find $ECALLI/configure");
print "\n";
$auto_detect = ($?==0) ? 1 : 0;
if(! $auto_detect) {
     print "\n*** Warn *** Path auto-detection is turned off. You need the 'find' utility to use that feature\n\n";
}

# Open Make.config to write configuration options
#
$MKCONF_FILE = "$ECALLI/Make.config";
open(MKCONF, ">$MKCONF_FILE") or die("Can not write out the Make.config file!");

print MKCONF "# \n";
print MKCONF "# Make.config \n";
print MKCONF "# This file was automatically generated by the 'configure' script  \n";
print MKCONF "# and is included into the project Makefiles  \n";
print MKCONF "# \n";

# Create a string by joining all the command line arguments
#
my $options = join(" ", @ARGV);

# --arch
#
my $arch="linux";
if(($match = grep(/--arch/i, @ARGV)) > 0) { 
  $options=~m/--arch=(\S*)/i;
  $arch = $1;
  if( $arch ne "linux" && $arch ne "macosx" && $arch ne "linuxx8664gcc") {
     print "*** Error *** ARCH = $arch is not supported! \n\n";
     exit 1;
  }
}

# installation location (--prefix) 
#
my $prefix="/usr/local/";
if(($match = grep(/--prefix/i, @ARGV)) > 0) { 
  $options=~m/--prefix=(\S*)/i;
  $prefix = $1;
  if( $ECALLI eq $prefix ) {
     print "*** Error *** --prefix can not be the same as the ECALLI var!\n\n";
     exit 1;
  }
}

# Default --enable/--disable config options (for a minimal genie build)
#
my $opt_enable_profiler      = "NO";
my $opt_enable_debug         = "NO";

# Check configure's command line arguments for non-default values
#
if(($match = grep(/--enable-profiler/i, @ARGV)) > 0) { $opt_enable_profiler = "YES"; }
if(($match = grep(/--enable-debug/i,    @ARGV)) > 0) { $opt_enable_debug    = "YES"; }

my $opt_with_cc_debug_flag="";
if($opt_enable_debug eq "YES") { $opt_with_cc_debug_flag = "-g"; }

#
# Check for --with options:
#

# Check compiler optimization level
#
my $opt_with_cc_optimiz_flag="O2"; # default
if( $options=~m/--with-optimiz-level=(\S*)/i ) {
  $opt_with_cc_optimiz_flag = $1;
}

# If --enable-profiler was set then the full path to the profiler library must be specified
#
my $opt_with_profiler_lib = "";
if($opt_enable_profiler eq "YES") {
  if(($match = grep(/--with-profiler-lib/i, @ARGV)) > 0) { 
    $options=~m/--with-profiler-lib=(\S*)/i;
    $opt_with_profiler_lib = $1;
  }
}

# If --enable-midas was set then the full path to the midas includes & libraries must be specified
#
my $opt_with_midas_inc = "";
my $opt_with_midas_lib = "";

if(($match = grep(/--with-midas-lib/i, @ARGV)) > 0) { 
    $options=~m/--with-midas-lib=(\S*)/i;
    $opt_with_midas_lib = $1;
} 
if(! -d $opt_with_midas_lib && $auto_detect)  {
    print "\n*** Warn *** You didn't specify the midas library path \n";
    print "Autodetecting...\n";
    $matched = auto_detect("libmidas*.*");
    if( $matched=~m/(\S*)\/libmidas\S*/i ) {
        $opt_with_midas_lib = $1;
     }
     print "Setting --with-midas-lib=$opt_with_midas_lib\n";
}
if(! -d $opt_with_midas_lib) {
    print "*** Error *** You need to specify the midas library path using --with-midas-lib=/some/path/\n\n";
    exit 1;
}

if(($match = grep(/--with-midas-inc/i, @ARGV)) > 0) { 
    $options=~m/--with-midas-inc=(\S*)/i;
    $opt_with_midas_inc = $1;
} 
if(! -d $opt_with_midas_inc && $auto_detect)  {
    print "\n*** Warn *** You didn't specify the midas include path \n";
    print "Autodetecting...\n";
    $matched = auto_detect("midas.h");
    if( $matched=~m/(\S*)\/midas.h/i ) {
       $opt_with_midas_inc = $1;
  }
  print "Setting --with-midas-inc=$opt_with_midas_inc\n";
}
if(! -d $opt_with_midas_inc) {
  print "*** Error *** You need to specify the midas include path using --with-midas-inc=/some/path/\n\n";
  exit 1;
}

# Save config options
#
print MKCONF "ECALLI_OPT_ARCH=$arch\n";
print MKCONF "ECALLI_OPT_INSTALLATION_PATH=$prefix\n";
print MKCONF "ECALLI_OPT_ENABLE_PROFILER=$opt_enable_profiler\n";
print MKCONF "ECALLI_OPT_WITH_CC_DEBUG_FLAG=$opt_with_cc_debug_flag\n";
print MKCONF "ECALLI_OPT_WITH_CC_OPTIMIZ_FLAG=-$opt_with_cc_optimiz_flag\n";
print MKCONF "ECALLI_OPT_WITH_PROFILER_LIB=$opt_with_profiler_lib\n";
print MKCONF "ECALLI_OPT_WITH_MIDAS_INC=$opt_with_midas_inc\n";
print MKCONF "ECALLI_OPT_WITH_MIDAS_LIB=$opt_with_midas_lib\n";

close(MKCONF);

write_build_header();

print "\nYour input configuration options were: @ARGV";
if($#ARGV < 0) { print "(none)" };
print "\n\n";

if(-e $MKCONF_FILE) {
  print "The $ECALLI/Make.config file has been succesfully generated! \n";
  print "The following config options were set: \n";

  open(MKCONFR, "<$MKCONF_FILE") or die("Can not read back the $ECALLI/Make.config!");
  @make_conf=<MKCONFR>;
  close(MKCONFR);
# print "@make_conf\n" unless ;
  foreach $setting (@make_conf) { 
    chomp($setting); 
    if ($setting=~m/\=/) {print "  $setting\n";} 
  }

  print "\n";
  print "*** To continue building ECALLI type: gmake ";
  # warning for SRT users  
  if(defined $ENV{'SRT_ENV_SET'}) {
    print "(Don't forget to 'srt_setup --unsetup' first)";
  }
  print "\n\n";

  exit 0;
}

sub write_build_header {

  $ECALLI = $ENV{'ECALLI'};
  die ("*** Error *** The ECALLI environmental variable (pointing to the top level ECALLI client directory) is not defined") 
  unless defined $ECALLI;

  # Read version info
  $REL_INFO_FILE = "$ECALLI/ECalLi.VERSION";
  open(REL_INFO, "<$REL_INFO_FILE") or die("Can not read the ECALLI version information!");
  @rel_info=<REL_INFO>;
  close(REL_INFO);
  chomp($release = $rel_info[0]);

  # ($major, $minor, $rev) = split('.', $release);
  # note: split() doesn't split on dots...
  $release=~m/(\d+).(\d+).(\d+)/;
  $major = $1;
  $minor = $2;
  $revis = $3;

  # Read Make.config 
  $MAKECONF_FILE = "$ECALLI/Make.config";
  die("Can not open $ECALLI/Make.config!") unless (-e $MAKECONF_FILE);

  # Open header file
  $HDR_FILE = "$ECALLI/ECalLiBuildInfo.h";
  open(HDR, ">$HDR_FILE") or die("Can not write out the ECalLiBuildInfo.h file!");

  # Write header file
  print HDR "#ifndef _ECALLI_BUILD_INFO_H_ \n";
  print HDR "#define _ECALLI_BUILD_INFO_H_ \n";
  print HDR "/* \n";
  print HDR " * Header file automatically generated by the configure script \n";
  print HDR "*/ \n\n";                      

  print HDR "/* \n";
  print HDR " * These macros can be used in the following way (as the ones at ROOT's RVersion.h): \n";
  print HDR " * #if __ECALLI_RELEASE_CODE__ >= ECALLI_RELCODE(2,4,11) \n";
  print HDR " * #include <newheader.h>\n";
  print HDR " * #else\n";
  print HDR " * #include <oldheader.h>\n";
  print HDR " * #endif\n";
  print HDR "*/ \n";                      
  print HDR "#define ECALLI_RELCODE(a,b,c) (((a) << 16) + ((b) << 8) + (c)) \n\n";
  print HDR "#define __ECALLI_RELEASE__      \"$release\"\n";
  print HDR "#define __ECALLI_RELEASE_CODE__ ECALLI_RELCODE($major,$minor,$revis) \n";
  print HDR "\n\n";

  print HDR "\n#endif\n\n";

  # Close header file
  close(HDR);

  # Close Make.config
  close(MAKECONF_FILE);
}

sub auto_detect {

  @search_dir  = ( );          
  push (@search_dir,"$ENV{'HOME'}") 
                 if defined $ENV{'HOME'};          # add $HOME
  push (@search_dir,"/WorkApp");                   # add where I add ext apps in my MacBookPro
  push (@search_dir,"/usr");                   
  push (@search_dir,"/lib");                   
  push (@search_dir,"/opt");                   
  push (@search_dir,"$ENV{'RSD_TOP_DIR'}") 
                 if defined $ENV{'RSD_TOP_DIR'};   # add where RSD puts ext supporting libs

  $search_file = shift; 
  foreach(@search_dir) {
     $curr_dir = $_;
     if(! -d $curr_dir) {next;}
     @matches = `find $curr_dir -maxdepth 8 -type f -name $search_file`;
     $nmatches = @matches;
     if( $nmatches > 0) { return $matches[0]; }
  }
  return "";
}
